{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ThoughtScreen = function ThoughtScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    randomThought = _useState2[0],\n    setRandomThought = _useState2[1];\n  useEffect(function () {\n    var onBackPress = function onBackPress() {\n      BackHandler.exitApp();\n      return true;\n    };\n    BackHandler.addEventListener('hardwareBackPress', onBackPress);\n    return function () {\n      BackHandler.removeEventListener('hardwareBackPress', onBackPress);\n    };\n  }, []);\n  useEffect(function () {\n    var thoughtsList = ['The only way to do great work is to love what you do.', 'Life is what happens when you’re busy making other plans.', 'Believe you can and you’re halfway there.', 'Strive not to be a success, but rather to be of value.'];\n    var randomIndex = Math.floor(Math.random() * thoughtsList.length);\n    var selectedThought = thoughtsList[randomIndex];\n    setRandomThought(selectedThought);\n  }, []);\n  var handleSkip = function handleSkip() {\n    navigation.navigate('Login');\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.thoughtText,\n      children: randomThought\n    }), _jsx(Button, {\n      title: \"Skip\",\n      onPress: handleSkip\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  thoughtText: {\n    fontSize: 18,\n    marginBottom: 20,\n    textAlign: 'center'\n  }\n});\nexport default ThoughtScreen;","map":{"version":3,"names":["React","useEffect","useState","View","Text","Button","BackHandler","StyleSheet","jsx","_jsx","jsxs","_jsxs","ThoughtScreen","_ref","navigation","_useState","_useState2","_slicedToArray","randomThought","setRandomThought","onBackPress","exitApp","addEventListener","removeEventListener","thoughtsList","randomIndex","Math","floor","random","length","selectedThought","handleSkip","navigate","style","styles","container","children","thoughtText","title","onPress","create","flex","justifyContent","alignItems","fontSize","marginBottom","textAlign"],"sources":["W:/VS code/vhss-template-main/vhss-template-main/src/ThoughtScreen.js"],"sourcesContent":["// ThoughtScreen.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { View, Text, Button, BackHandler, StyleSheet } from 'react-native';\r\n\r\nconst ThoughtScreen = ({ navigation }) => {\r\n  const [randomThought, setRandomThought] = useState('');\r\n\r\n  useEffect(() => {\r\n    const onBackPress = () => {\r\n      // Close the app when the back button is pressed\r\n      BackHandler.exitApp();\r\n      return true; // Prevent default behavior (closing the app)\r\n    };\r\n\r\n    // Add event listener for the back button press\r\n    BackHandler.addEventListener('hardwareBackPress', onBackPress);\r\n\r\n    // Clean up the event listener when the component is unmounted\r\n    return () => {\r\n      BackHandler.removeEventListener('hardwareBackPress', onBackPress);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Fetch or generate a list of random thoughts\r\n    const thoughtsList = [\r\n      'The only way to do great work is to love what you do.',\r\n      'Life is what happens when you’re busy making other plans.',\r\n      'Believe you can and you’re halfway there.',\r\n      'Strive not to be a success, but rather to be of value.',\r\n      // Add more thoughts as needed\r\n    ];\r\n\r\n    // Select a random thought from the list\r\n    const randomIndex = Math.floor(Math.random() * thoughtsList.length);\r\n    const selectedThought = thoughtsList[randomIndex];\r\n\r\n    // Update the state to trigger a re-render with the new thought\r\n    setRandomThought(selectedThought);\r\n  }, []);\r\n\r\n  const handleSkip = () => {\r\n    // Navigate to the next screen after clicking the skip button.\r\n    // Replace 'Login' with the name of your next screen.\r\n    navigation.navigate('Login');\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.thoughtText}>{randomThought}</Text>\r\n      <Button title=\"Skip\" onPress={handleSkip} />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  thoughtText: {\r\n    fontSize: 18,\r\n    marginBottom: 20,\r\n    textAlign: 'center',\r\n  },\r\n});\r\n\r\nexport default ThoughtScreen;"],"mappings":";AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,MAAA;AAAA,OAAAC,WAAA;AAAA,OAAAC,UAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAGnD,IAAMC,aAAa,GAAG,SAAhBA,aAAaA,CAAAC,IAAA,EAAuB;EAAA,IAAjBC,UAAU,GAAAD,IAAA,CAAVC,UAAU;EACjC,IAAAC,SAAA,GAA0Cb,QAAQ,CAAC,EAAE,CAAC;IAAAc,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA/CG,aAAa,GAAAF,UAAA;IAAEG,gBAAgB,GAAAH,UAAA;EAEtCf,SAAS,CAAC,YAAM;IACd,IAAMmB,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;MAExBd,WAAW,CAACe,OAAO,CAAC,CAAC;MACrB,OAAO,IAAI;IACb,CAAC;IAGDf,WAAW,CAACgB,gBAAgB,CAAC,mBAAmB,EAAEF,WAAW,CAAC;IAG9D,OAAO,YAAM;MACXd,WAAW,CAACiB,mBAAmB,CAAC,mBAAmB,EAAEH,WAAW,CAAC;IACnE,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAENnB,SAAS,CAAC,YAAM;IAEd,IAAMuB,YAAY,GAAG,CACnB,uDAAuD,EACvD,2DAA2D,EAC3D,2CAA2C,EAC3C,wDAAwD,CAEzD;IAGD,IAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGJ,YAAY,CAACK,MAAM,CAAC;IACnE,IAAMC,eAAe,GAAGN,YAAY,CAACC,WAAW,CAAC;IAGjDN,gBAAgB,CAACW,eAAe,CAAC;EACnC,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAA,EAAS;IAGvBjB,UAAU,CAACkB,QAAQ,CAAC,OAAO,CAAC;EAC9B,CAAC;EAED,OACErB,KAAA,CAACR,IAAI;IAAC8B,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,GAC5B3B,IAAA,CAACL,IAAI;MAAC6B,KAAK,EAAEC,MAAM,CAACG,WAAY;MAAAD,QAAA,EAAElB;IAAa,CAAO,CAAC,EACvDT,IAAA,CAACJ,MAAM;MAACiC,KAAK,EAAC,MAAM;MAACC,OAAO,EAAER;IAAW,CAAE,CAAC;EAAA,CACxC,CAAC;AAEX,CAAC;AAED,IAAMG,MAAM,GAAG3B,UAAU,CAACiC,MAAM,CAAC;EAC/BL,SAAS,EAAE;IACTM,IAAI,EAAE,CAAC;IACPC,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE;EACd,CAAC;EACDN,WAAW,EAAE;IACXO,QAAQ,EAAE,EAAE;IACZC,YAAY,EAAE,EAAE;IAChBC,SAAS,EAAE;EACb;AACF,CAAC,CAAC;AAEF,eAAelC,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}