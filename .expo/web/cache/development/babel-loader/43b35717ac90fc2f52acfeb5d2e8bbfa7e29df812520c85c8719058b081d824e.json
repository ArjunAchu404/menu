{"ast":null,"code":"var _reactJsxRuntime = require(\"react/jsx-runtime\");\nvar HomeScreenContent = function HomeScreenContent() {\n  var buttons = generateButtons(6, 130);\n  var randomWords = generateRandomWords(6);\n  return _reactJsxRuntime.jsx(ImageBackground, {\n    source: require(\"../assets/abc.png\"),\n    style: styles.backgroundImage,\n    children: _reactJsxRuntime.jsxs(View, {\n      style: styles.container,\n      children: [_reactJsxRuntime.jsx(Text, {\n        style: [styles.message, {\n          top: -20,\n          left: 0\n        }],\n        children: \"Home Screen\"\n      }), buttons.map(function (button, index) {\n        return _reactJsxRuntime.jsx(TouchableOpacity, {\n          style: [styles.roundButton, {\n            top: button.top,\n            left: button.left\n          }],\n          onPress: function onPress() {\n            return alert(`Button ${index + 1} (${randomWords[index]}) pressed`);\n          },\n          children: _reactJsxRuntime.jsx(Text, {\n            style: styles.buttonText,\n            children: randomWords[index]\n          })\n        }, index);\n      })]\n    })\n  });\n};","map":{"version":3,"names":["HomeScreenContent","buttons","generateButtons","randomWords","generateRandomWords","_reactJsxRuntime","jsx","ImageBackground","source","require","style","styles","backgroundImage","children","jsxs","View","container","Text","message","top","left","map","button","index","TouchableOpacity","roundButton","onPress","alert","buttonText"],"sources":["W:/VS code/vhss-template-main/vhss-template-main/src/HomeScreen.js"],"sourcesContent":["const HomeScreenContent = () => {\r\n  const buttons = generateButtons(6, 130);\r\n  const randomWords = generateRandomWords(6);\r\n\r\n  return (\r\n    <ImageBackground\r\n      source={require('../assets/abc.png')}\r\n      style={styles.backgroundImage}\r\n    >\r\n      <View style={styles.container}>\r\n        <Text style={[styles.message, { top: -20, left: 0 }]}>Home Screen</Text>\r\n\r\n        {buttons.map((button, index) => (\r\n          <TouchableOpacity\r\n            key={index}\r\n            style={[\r\n              styles.roundButton,\r\n              {\r\n                top: button.top,\r\n                left: button.left,\r\n              },\r\n            ]}\r\n            onPress={() => alert(`Button ${index + 1} (${randomWords[index]}) pressed`)}\r\n            // Fix: Use backticks (`) for template literals\r\n          >\r\n            <Text style={styles.buttonText}>\r\n              {randomWords[index]}\r\n            </Text>\r\n          </TouchableOpacity>\r\n        ))}\r\n      </View>\r\n    </ImageBackground>\r\n  );\r\n};\r\n"],"mappings":";AAAA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAA,EAAS;EAC9B,IAAMC,OAAO,GAAGC,eAAe,CAAC,CAAC,EAAE,GAAG,CAAC;EACvC,IAAMC,WAAW,GAAGC,mBAAmB,CAAC,CAAC,CAAC;EAE1C,OACEC,gBAAA,CAAAC,GAAA,CAACC,eAAe;IACdC,MAAM,EAAEC,OAAO,oBAAoB,CAAE;IACrCC,KAAK,EAAEC,MAAM,CAACC,eAAgB;IAAAC,QAAA,EAE9BR,gBAAA,CAAAS,IAAA,CAACC,IAAI;MAACL,KAAK,EAAEC,MAAM,CAACK,SAAU;MAAAH,QAAA,GAC5BR,gBAAA,CAAAC,GAAA,CAACW,IAAI;QAACP,KAAK,EAAE,CAACC,MAAM,CAACO,OAAO,EAAE;UAAEC,GAAG,EAAE,CAAC,EAAE;UAAEC,IAAI,EAAE;QAAE,CAAC,CAAE;QAAAP,QAAA,EAAC;MAAW,CAAM,CAAC,EAEvEZ,OAAO,CAACoB,GAAG,CAAC,UAACC,MAAM,EAAEC,KAAK;QAAA,OACzBlB,gBAAA,CAAAC,GAAA,CAACkB,gBAAgB;UAEfd,KAAK,EAAE,CACLC,MAAM,CAACc,WAAW,EAClB;YACEN,GAAG,EAAEG,MAAM,CAACH,GAAG;YACfC,IAAI,EAAEE,MAAM,CAACF;UACf,CAAC,CACD;UACFM,OAAO,EAAE,SAAAA,QAAA;YAAA,OAAMC,KAAK,CAAE,UAASJ,KAAK,GAAG,CAAE,KAAIpB,WAAW,CAACoB,KAAK,CAAE,WAAU,CAAC;UAAA,CAAC;UAAAV,QAAA,EAG5ER,gBAAA,CAAAC,GAAA,CAACW,IAAI;YAACP,KAAK,EAAEC,MAAM,CAACiB,UAAW;YAAAf,QAAA,EAC5BV,WAAW,CAACoB,KAAK;UAAC,CACf;QAAC,GAbFA,KAcW,CAAC;MAAA,CACpB,CAAC;IAAA,CACE;EAAC,CACQ,CAAC;AAEtB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}